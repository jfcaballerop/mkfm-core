<script>
    var ifdtobject;
    var nchar = 0;
    var resized = false;
    var formulasDB = <%- JSON.stringify(formula) %>;
    var objectConstructor = {}.constructor;

    // console.log(formulasDB);

    function clickButton(id) {
        //alert('click');
        // TODO: Start spinner
        $('#spinner' + id).show();
        $('#resultUpdate' + id).empty();
        var $this = $('#' + id);
        // console.log($this.attr('id'));
        var arrCallProm = $this.attr('id').split('__');
        var dataPost = {};
        dataPost[arrCallProm[0]] = arrCallProm[1];
        // console.log('Call update critically: ' + JSON.stringify(dataPost));

        var tipoDeFormula = '';
        if (arrCallProm[0].indexOf('onditio') > -1) {
            tipoDeFormula = 'update_formulas_tracks_condition';
        } else if (arrCallProm[0].indexOf('AssetResponse') >= 0) {
            tipoDeFormula = 'update_formulas_tracks_response';

        } else if (arrCallProm[0].indexOf('AssetSensitivity') >= 0) {
            tipoDeFormula = 'update_formulas_tracks_sensitivity';

        } else if (arrCallProm[0].indexOf('Likelihood') >= 0) {
            tipoDeFormula = 'update_formulas_tracks_likelihood';

        } else if (arrCallProm[0].indexOf('Risk') >= 0) {
            tipoDeFormula = 'update_formulas_tracks_risk';

        } else {
            tipoDeFormula = 'update_formulas_tracks';
        }

        //console.log(tipoDeFormula + '---------------------------------------------');
        var p1 = $.ajax({
            url: '/auth/WEB/admin/' + tipoDeFormula + '/' + arrCallProm[0] + '/' + arrCallProm[1],
            data: JSON.stringify(dataPost),
            type: 'POST',
            contentType: 'application/json'
        }, function(data) { // console.log('koboinfo ' + JSON.stringify(data)); return (data);
        });
        Promise.all([p1]).then(function(values) {
            // console.log(values);
            if (values[0].result === "OK") {
                // TODO: Stop spinner        
                $('#spinner' + id).hide();
                if (tipoDeFormula !== 'update_formulas_tracks_response' && tipoDeFormula !==
                    'update_formulas_tracks_condition' &&
                    tipoDeFormula !== 'update_formulas_tracks_sensitivity' &&
                    tipoDeFormula !== 'update_formulas_tracks_likelihood') {

                    $('#resultUpdate' + id).append('Tracks update: ' + values[0].tracksUpdated);
                    if (tipoDeFormula === 'update_formulas_tracks_risk') {
                        // console.log(values[0].schedphy);
                        // console.log(values[0].schednat);

                        $('#FormulaRisk__Risk').empty();
                        data = values[0].schedphy;
                        var html = [];
                        var i = -1;
                        html[++i] = '<div class="radio">' +
                            '  <label class="radio-inline">' +
                            '    <input type="radio" name="optionsRadiosRisk" id="radio_phy" value="radio_phy" checked=""> Physical' +
                            '  </label>' +
                            '';
                        html[++i] = '' +
                            '  <label class="radio-inline">' +
                            '    <input type="radio" name="optionsRadiosRisk" id="radio_nat" value="radio_nat" > Natural' +
                            '  </label>' +
                            '</div>';

                        html[++i] =
                            '<div id="div_formulas_tracks_risk_phy" ><table id="table_formulas_tracks_risk_phy" class="table table-bordered table-striped table-condensed">' +
                            ' <thead><tr><th>CODE RISK PHYSICAL</th><th>Length (m)</th>' +
                            '<th>Width (m)</th><th>Height (m)</th><th>Cost (EC$)</th></tr></thead><tbody>';
                        for (var d of data) {
                            html[++i] = '<tr><td>' + d.code + '</td><td>' + Math.round(d.length * 100) / 100 +
                                '</td><td>' + (d.width !== undefined ? d.width : '--') + '</td>';
                            html[++i] = '<td>' + (d.height !== undefined ? d.height : '--') + '</td>';
                            html[++i] = '<td>' + (d.cost !== undefined ? Math.round(d.cost * 100) / 100 :
                                '--') + '</td>';
                            html[++i] = '</tr>';
                        }
                        html[++i] = '</tbody></table></div>';


                        data2 = values[0].schednat;
                        html[++i] =
                            '<div id="div_formulas_tracks_risk_nat" style="display:none"><table id="table_formulas_tracks_risk_nat" class="table table-bordered table-striped table-condensed" > ' +
                            '<thead><tr><th>CODE RISK NATURAL</th><th>Length (m)</th>' +
                            '<th>Width (m)</th><th>Height (m)</th></tr></thead><tbody>';
                        for (var d of data2) {
                            html[++i] = '<tr><td>' + d.code + '</td><td>' + Math.round(d.length * 100) / 100 +
                                '</td><td>' + (d.width !== undefined ? d.width : '--') + '</td>';
                            html[++i] = '<td>' + (d.cost !== undefined ? Math.round(d.cost * 100) / 100 :
                                '--') + '</td>';
                            html[++i] = '</tr>';

                        }
                        html[++i] = '</tbody></table></div>';

                        $('#FormulaRisk__Risk').html(html.join(''));

                        $('#table_formulas_tracks_risk_phy tbody').paginathing({
                            perPage: 50, // Pagination controls
                            prevNext: true,
                            firstLast: true,
                            prevText: '&laquo;',
                            nextText: '&raquo;',
                            firstText: 'First',
                            lastText: 'Last',
                            containerClass: 'pagination-container',
                            ulClass: 'pagination',
                            liClass: 'page',
                            activeClass: 'active',
                            disabledClass: 'disabled',
                            limitPagination: 15,

                        });
                        $('#table_formulas_tracks_risk_nat tbody').paginathing({
                            perPage: 50, // Pagination controls
                            prevNext: true,
                            firstLast: true,
                            prevText: '&laquo;',
                            nextText: '&raquo;',
                            firstText: 'First',
                            lastText: 'Last',
                            containerClass: 'pagination-container',
                            ulClass: 'pagination',
                            liClass: 'page',
                            activeClass: 'active',
                            disabledClass: 'disabled',
                            limitPagination: 15,

                        });

                    }
                } else {
                    $('#resultUpdate' + id).append('Tracks updated. Result: ' + values[0].result);

                }
                // console.log(values[0].tracksUpdated);

            }
        });

    };
    $(document).ready(function() {


        // alert(featurePaintCriticality.publicThing);

        $.each(formulasDB, function(index, form) {
            //console.log(form.properties.HTML);
            $('#' + form.properties.HTML.id).on('click', function(event) {
                $this = $(this);
                //alert('AssetCriticality');
                $('#formulaName').empty();
                $('#selectFormula').empty();
                $('#formulaName').append(form.properties.HTML.text);
                // console.log(form.properties.HTML.id);
                switch ($this[0].id) {
                    case "AssetCondition":
                        $('#formulaSpec').empty();
                        $('#selectFormula').empty();
                        /*
                            Feature paint formula
                        */
                        featurePaintCondition.paintHTML(form);

                        $('input[type=radio][name=optionsRadios]').on('change', function() {
                            // alert(this.value);
                            var arrRadio = $('input[type=radio][name=optionsRadios]');
                            $.each(arrRadio, function(r, radio) {
                                // console.log(r + ' ' + radio.value);
                                $('#formulaTable' + radio.value).hide();
                            });
                            var capa = '#formulaTable' + this.value;
                            $(capa).show();


                        });
                        var valant = '';
                        $('input[type=number]').on('focus', function() {
                            // console.log(this.value);
                            // On first focus, check to see if we have the default text saved
                            // If not, save current value to data()
                            //if (!$(this).data('')) $(this).data('', $(this).val());

                            // check to see if the input currently equals the default before clearing it
                            valant = $(this).val();
                        });
                        $('input[type=number]').on('blur', function() {
                            // on blur, if there is no value, set the defaultText
                            if ($(this).val() != valant) {
                                // $(this).val($(this).data('defaultText'));
                                var dataPost = {};
                                dataPost[this.name] = this.value;
                                var $input = $(this);

                                // console.log('New Val: ' + JSON.stringify(dataPost));

                                var p1 = $.ajax({
                                    url: '/auth/WEB/admin/update_field/' + this
                                        .name + '/' + this.value,
                                    data: JSON.stringify(dataPost),
                                    type: 'POST',
                                    contentType: 'application/json'
                                }, function(data) {
                                    // console.log('koboinfo ' + JSON.stringify(
                                    //     data));
                                    return (data);
                                });
                                Promise.all([p1]).then(function(values) {
                                    // console.log(values);
                                    if (values[0].result === "OK") {
                                        $input.css("border", "2px solid green");
                                    } else {
                                        $input.css("border", "2px solid red");
                                    }
                                });

                            }
                        });
                        this.name = '';
                        break;

                    case "AssetCriticality":
                        $('#formulaSpec').empty();
                        $('#selectFormula').empty();
                        /*
                            Feature paint formula
                        */
                        featurePaintCriticality.paintHTML(form);

                        $('input[type=radio][name=optionsRadios]').on('change', function() {
                            // alert(this.value);
                            var arrRadio = $('input[type=radio][name=optionsRadios]');
                            $.each(arrRadio, function(r, radio) {
                                // console.log(r + ' ' + radio.value);
                                $('#formulaTable' + radio.value).hide();
                            });
                            var capa = '#formulaTable' + this.value;
                            $(capa).show();


                        });
                        var valant = '';
                        $('input[type=text]').on('focus', function() {
                            // console.log(this.value);
                            // On first focus, check to see if we have the default text saved
                            // If not, save current value to data()
                            //if (!$(this).data('')) $(this).data('', $(this).val());

                            // check to see if the input currently equals the default before clearing it
                            valant = $(this).val();
                        });
                        $('input[type=text]').on('blur', function() {
                            // on blur, if there is no value, set the defaultText
                            if ($(this).val() != valant) {
                                // $(this).val($(this).data('defaultText'));
                                var dataPost = {};
                                dataPost[this.name] = this.value;
                                var $input = $(this);

                                // console.log('New Val: ' + JSON.stringify(dataPost));

                                var p1 = $.ajax({
                                    url: '/auth/WEB/admin/update_field/' + this
                                        .name + '/' + this.value,
                                    data: JSON.stringify(dataPost),
                                    type: 'POST',
                                    contentType: 'application/json'
                                }, function(data) {
                                    // console.log('koboinfo ' + JSON.stringify(data));
                                    return (data);
                                });
                                Promise.all([p1]).then(function(values) {
                                    // console.log(values);
                                    if (values[0].result === "OK") {
                                        $input.css("border", "2px solid green");
                                    } else {
                                        $input.css("border", "2px solid red");
                                    }
                                });

                            }
                        });
                        break;

                        // AssetResponse
                        /////////////////

                    case "AssetResponse":
                        $('#formulaSpec').empty();
                        $('#selectFormula').empty();
                        /*
                            Feature paint formula
                        */
                        featurePaintResponse.paintHTML(form);


                        var valant = '';
                        $('input[type=number]').on('focus', function() {
                            // console.log(this.value);
                            // On first focus, check to see if we have the default text saved
                            // If not, save current value to data()
                            //if (!$(this).data('')) $(this).data('', $(this).val());

                            // check to see if the input currently equals the default before clearing it
                            valant = $(this).val();
                        });
                        $('input[type=number]').on('blur', function() {
                            // on blur, if there is no value, set the defaultText
                            if ($(this).val() != valant) {
                                // $(this).val($(this).data('defaultText'));
                                var dataPost = {};
                                dataPost['AssetResponse__' + this.name] = this.value;
                                var $input = $(this);

                                // console.log('New Val: ' + JSON.stringify(dataPost));

                                var p1 = $.ajax({
                                    url: '/auth/WEB/admin/update_field/AssetResponse__' +
                                        this.name + '/' + this.value,
                                    data: JSON.stringify(dataPost),
                                    type: 'POST',
                                    contentType: 'application/json'
                                }, function(data) {
                                    // console.log('koboinfo ' + JSON.stringify(data));
                                    return (data);
                                });
                                Promise.all([p1]).then(function(values) {
                                    // console.log(values);
                                    if (values[0].result === "OK") {
                                        $input.css("border", "2px solid green");
                                    } else {
                                        $input.css("border", "2px solid red");
                                    }
                                });

                            }
                        });
                        break;
                        // AssetSensitivity
                        /////////////////

                    case "AssetSensitivity":
                        $('#formulaSpec').empty();
                        $('#selectFormula').empty();
                        /*
                            Feature paint formula
                        */
                        featurePaintSensitivity.paintHTML(form);


                        var valant = '';
                        $('input[type=number]').on('focus', function() {
                            // console.log(this.value);
                            // On first focus, check to see if we have the default text saved
                            // If not, save current value to data()
                            //if (!$(this).data('')) $(this).data('', $(this).val());

                            // check to see if the input currently equals the default before clearing it
                            valant = $(this).val();
                        });
                        $('input[type=number]').on('blur', function() {
                            // on blur, if there is no value, set the defaultText
                            if ($(this).val() != valant) {
                                // $(this).val($(this).data('defaultText'));
                                var dataPost = {};
                                dataPost['AssetSensitivity__' + this.name] = this.value;
                                var $input = $(this);

                                // console.log('New Val: ' + JSON.stringify(dataPost));

                                var p1 = $.ajax({
                                    url: '/auth/WEB/admin/update_field/AssetSensitivity__' +
                                        this.name + '/' + this.value,
                                    data: JSON.stringify(dataPost),
                                    type: 'POST',
                                    contentType: 'application/json'
                                }, function(data) {
                                    // console.log('koboinfo ' + JSON.stringify(data));
                                    return (data);
                                });
                                Promise.all([p1]).then(function(values) {
                                    // console.log(values);
                                    if (values[0].result === "OK") {
                                        $input.css("border", "2px solid green");
                                    } else {
                                        $input.css("border", "2px solid red");
                                    }
                                });

                            }
                        });
                        break;
                        // Likelihood
                        /////////////////

                    case "Likelihood":
                        $('#formulaSpec').empty();
                        $('#selectFormula').empty();
                        /*
                            Feature paint formula
                        */
                        featurePaintLikelihood.paintHTML(form);


                        var valant = '';
                        $('input[type=number]').on('focus', function() {
                            // console.log(this.value);
                            // On first focus, check to see if we have the default text saved
                            // If not, save current value to data()
                            //if (!$(this).data('')) $(this).data('', $(this).val());

                            // check to see if the input currently equals the default before clearing it
                            valant = $(this).val();
                        });
                        $('input[type=number]').on('blur', function() {
                            // on blur, if there is no value, set the defaultText
                            if ($(this).val() != valant) {
                                // $(this).val($(this).data('defaultText'));
                                var dataPost = {};
                                dataPost['Likelihood__' + this.name] = this.value;
                                var $input = $(this);

                                // console.log('New Val: ' + JSON.stringify(dataPost));

                                var p1 = $.ajax({
                                    url: '/auth/WEB/admin/update_field/Likelihood__' +
                                        this.name + '/' + this.value,
                                    data: JSON.stringify(dataPost),
                                    type: 'POST',
                                    contentType: 'application/json'
                                }, function(data) {
                                    // console.log('koboinfo ' + JSON.stringify(data));
                                    return (data);
                                });
                                Promise.all([p1]).then(function(values) {
                                    // console.log(values);
                                    if (values[0].result === "OK") {
                                        $input.css("border", "2px solid green");
                                    } else {
                                        $input.css("border", "2px solid red");
                                    }
                                });

                            }
                        });
                        break;

                        // Risk
                        /////////////////

                    case "Risk":
                        $('#formulaSpec').empty();
                        $('#selectFormula').empty();
                        /*
                            Feature paint formula
                        */
                        featureRisk.paintHTML(form);



                        var valant = '';
                        $('input[type=number]').on('focus', function() {
                            // console.log(this.value);
                            // On first focus, check to see if we have the default text saved
                            // If not, save current value to data()
                            //if (!$(this).data('')) $(this).data('', $(this).val());

                            // check to see if the input currently equals the default before clearing it
                            valant = $(this).val();
                        });
                        $('input[type=number]').on('blur', function() {
                            // on blur, if there is no value, set the defaultText
                            if ($(this).val() != valant) {
                                // $(this).val($(this).data('defaultText'));
                                var dataPost = {};
                                dataPost['Risk__' + this.name] = this.value;
                                var $input = $(this);

                                // console.log('New Val: ' + JSON.stringify(dataPost));

                                var p1 = $.ajax({
                                    url: '/auth/WEB/admin/update_field/Risk__' +
                                        this.name + '/' + this.value,
                                    data: JSON.stringify(dataPost),
                                    type: 'POST',
                                    contentType: 'application/json'
                                }, function(data) {
                                    // console.log('koboinfo ' + JSON.stringify(data));
                                    return (data);
                                });
                                Promise.all([p1]).then(function(values) {
                                    // console.log(values);
                                    if (values[0].result === "OK") {
                                        $input.css("border", "2px solid green");
                                    } else {
                                        $input.css("border", "2px solid red");
                                    }
                                });

                            }
                        });
                        break;
                    default:
                        $('#formulaSpec').empty();
                        break;
                }

            });
        });
        var checkExist = setInterval(function() {
            if ($('#div_formulas_tracks_risk_nat').length) {
                // console.log("Exists!");
                clearInterval(checkExist);
                $('input[name=optionsRadiosRisk').change(function() {
                    if ($(this).val() === 'radio_nat') {
                        $('#div_formulas_tracks_risk_phy').hide();
                        $('#div_formulas_tracks_risk_nat').show();
                    } else {
                        $('#div_formulas_tracks_risk_nat').hide();
                        $('#div_formulas_tracks_risk_phy').show();

                    }
                });
            }
        }, 1000); // check every 1000ms

    });
</script>