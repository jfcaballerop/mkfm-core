<script>
    $(document).ready(function() {

        $(":radio").prop('disabled', true);
        $("#generateReport").prop('disabled', true);

        var docDefinition = {
            content: [
                // if you don't need styles, you can use a simple string to define a paragraph
                {
                    text: 'This is a header',
                    style: 'header'
                },
                'No styling here, this is a standard paragraph', {
                    text: 'Another text',
                    style: 'anotherStyle'
                }, {
                    text: 'Multiple styles applied',
                    style: ['header', 'anotherStyle']
                },
                'This is a standard paragraph, using default style',

                // using a { text: '...' } object lets you set styling properties
                {
                    text: 'This paragraph will have a bigger font',
                    fontSize: 15
                },

                // if you set pass an array instead of a string, you'll be able
                // to style any fragment individually
                {
                    text: [
                        'This paragraph is defined as an array of elements to make it possible to ', {
                            text: 'restyle part of it and make it bigger ',
                            fontSize: 15
                        },
                        'than the rest.'
                    ]
                }
            ],

            styles: {
                header: {
                    fontSize: 22,
                    bold: true
                },
                anotherStyle: {
                    italic: true,
                    alignment: 'right'
                }
            }
        };



        $('#openPdf').click(function() {

            pdfMake.createPdf(docDefinition).open();
        });

        $("#searchtool").on('keyup', function(e) {
            var $this = $(this);
            if (e.keyCode == 13) {

                $('#error').hide();
                $('#error').empty();
                $('#response').hide();
                $('#response').empty();
                var dataPost = {};

                if ($this.val().length <= 0) {
                    $('#error').hide();
                    $('#error').empty();
                    $('#error').append("Empty value.<br>Try again.");
                    $('#error').show();
                    $(":radio").prop('disabled', true);
                    $("#generateReport").prop('disabled', true);

                } else {


                    var p1 = $.ajax({
                        url: '/auth/WEB/infodatatrack/list_ifdt/' + $this.val(),
                        data: JSON.stringify(dataPost),
                        type: 'POST',
                        contentType: 'application/json'
                    }, function(data) {
                        // console.log('koboinfo ' + JSON.stringify(data));
                        return (data);
                    });
                    Promise.all([p1]).then(function(values) {
                        $('#spinner').show();
                        ifdt = values[0];
                        console.log(ifdt);
                        if (ifdt.properties.asset_type === 'ERROR') {
                            $('#error').show();
                            $('#error').append("Search not found.<br>Try again.");
                            $(":radio").prop('disabled', true);
                            $("#generateReport").prop('disabled', true);


                        } else {
                            $('#response').empty();
                            $('#response').show();
                            $('#response').append("Asset type: " + ifdt.properties.asset_type);
                            $(":radio").prop('disabled', false);
                            $("#generateReport").prop('disabled', true);


                        }

                        $('#spinner').hide();

                    });
                }
            }

        });

        var selected;
        $(":radio").change(function() {
            $this = $(this);
            console.log($this[0].value);
            selected = $this[0].value;
            $("#generateReport").prop('disabled', false);

        });



        $('#generateReport').click(function() {
            var dataPost = {};

            var p1 = $.ajax({
                url: '/auth/WEB/report/generatePDF/' + selected,
                data: JSON.stringify(dataPost),
                type: 'POST',
                contentType: 'application/json'
            }, function(data) {
                // console.log('koboinfo ' + JSON.stringify(data));
                return (data);
            });
            Promise.all([p1]).then(function(values) {
                $('#spinner').show();
                ret = values[0];
                console.log(ret);
                if (ret.result !== 'OK') {
                    $('#error').show();
                    $('#error').append("No report available<br>Try again.");

                } else {
                    $('#response').empty();
                    $('#iframeContainer').empty();
                    $('#response').show();
                    $('#response').append("Generating...");
                    $(":radio").prop('disabled', false);
                    $("#generateReport").prop('disabled', true);
                    $('#spinner').hide();
                    docDefinition = ret.docDefinition;
                    var pdfDocGenerator = pdfMake.createPdf(docDefinition);
                    pdfDocGenerator.getDataUrl((dataUrl) => {
                        const targetElement = document.querySelector('#iframeContainer');
                        const iframe = document.createElement('iframe');
                        iframe.src = dataUrl;
                        iframe.style.width = "100%";
                        iframe.style.height = ($(window).height() - 200) + 'px';
                        targetElement.appendChild(iframe);
                    });
                    // pdfMake.createPdf(docDefinition).open();

                }

                $('#spinner').hide();

            });

        });
    });
</script>