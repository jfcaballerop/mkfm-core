<!-- <link href="https://gitcdn.github.io/bootstrap-toggle/2.2.2/css/bootstrap-toggle.min.css" rel="stylesheet">
<script src="https://gitcdn.github.io/bootstrap-toggle/2.2.2/js/bootstrap-toggle.min.js"></script> -->
<script>
    $(document).ready(function () {
        console.log('budget_scripts.ejs');
        var donut1 = undefined;
        var donut2 = undefined;
        var donut3 = undefined;
        var ValRoutine = 0;
        var ValPeriodic = 0;
        var ValEmergency = 0;
        var ValAmount = 0;
        var ValBrushcutting = 0;
        var ValDrainclearing = 0;
        var ValPatching = 0;
        var ValRoadSafetyImprovement = 0;
        var ValDesignProjects = 0;
        var ValWorkInterventions = 0;
        var ValInspections = 0;

        var risk_rating = [];
        risk_rating['0-20'] = [];
        risk_rating['0-20']['A'] = 1;
        risk_rating['0-20']['B'] = 1;
        risk_rating['0-20']['C'] = 2;
        risk_rating['0-20']['D'] = 2;
        risk_rating['0-20']['E'] = 3;
        risk_rating['20-40'] = [];
        risk_rating['20-40']['A'] = 1;
        risk_rating['20-40']['B'] = 2;
        risk_rating['20-40']['C'] = 2;
        risk_rating['20-40']['D'] = 3;
        risk_rating['20-40']['E'] = 3;
        risk_rating['40-60'] = [];
        risk_rating['40-60']['A'] = 2;
        risk_rating['40-60']['B'] = 3;
        risk_rating['40-60']['C'] = 3;
        risk_rating['40-60']['D'] = 3;
        risk_rating['40-60']['E'] = 4;
        risk_rating['60-80'] = [];
        risk_rating['60-80']['A'] = 2;
        risk_rating['60-80']['B'] = 3;
        risk_rating['60-80']['C'] = 3;
        risk_rating['60-80']['D'] = 4;
        risk_rating['60-80']['E'] = 5;
        risk_rating['80-100'] = [];
        risk_rating['80-100']['A'] = 3;
        risk_rating['80-100']['B'] = 3;
        risk_rating['80-100']['C'] = 4;
        risk_rating['80-100']['D'] = 5;
        risk_rating['80-100']['E'] = 5;
        console.log(risk_rating);

        var ddata1 = [{
            label: "Routine",
            value: 25
        }, {
            label: "Periodic",
            value: 70
        }, {
            label: "Emergency",
            value: 5
        }];
        var ddata2 = [{
            label: "Brush cutting",
            value: 45
        },
        {
            label: "Drain clearing",
            value: 20
        },
        {
            label: "Patching",
            value: 20
        },
        {
            label: "Road Safety Improvement",
            value: 15
        }
        ];
        var ddata3 = [
            // {
            //     label: "Design Projects",
            //     value: 15
            // },
            {
                label: "Work Interventions",
                value: 75
            },
            {
                label: "Inspections",
                value: 10
            }
        ];

        function sanitizeNumberFields(field) {
            var max = parseInt(field.attr('max'));
            var min = parseInt(field.attr('min'));
            if (field.val() > max) {
                field.val(max);
            } else if (field.val() < min) {
                field.val(min);
            }
        };

        function paintRiskTable(code) {
            var option = $('input[type=radio][name=optionRisk]:checked').val();
            var optionPeriod = $('input[type=radio][name=optionPeriod]:checked').val();
            var totalAmount = 0;
            var totalYearAmount = 0;

            console.log(option);
            console.log(parseInt(optionPeriod));

            var riskType = "";
            switch (option) {
                case "PhysicalDeterioration":
                    $('#divTableRisk').empty();
                    // $('#divTableRisk').append('Physical Deterioration');
                    riskType = 'PHY';

                    break;
                case "NaturalHazards":
                    $('#divTableRisk').empty();
                    // $('#divTableRisk').append('Natural Hazards');
                    riskType = 'NAT';

                    break;

                default:
                    return false;
                    break;
            }

            totalYearAmount = ((ValAmount * 1000000) * (ValPeriodic / 100) * (ValWorkInterventions / 100));
            console.log("INICIAL:", totalYearAmount);
            switch (optionPeriod) {

                case "5":
                    totalAmount = ((ValAmount * 1000000) * (ValPeriodic / 100) * (ValWorkInterventions / 100)) *
                        5;
                    break;
                case "10":
                    totalAmount = ((ValAmount * 1000000) * (ValPeriodic / 100) * (ValWorkInterventions / 100)) *
                        10;
                    break;

                default:
                    totalAmount = ((ValAmount * 1000000) * (ValPeriodic / 100) * (ValWorkInterventions / 100));
                    break;
            }

            var dataPost = {};
            dataPost['riskType'] = riskType;
            var url = '/auth/WEB/schedule/getSched/' + riskType + '/' + totalAmount;
            if (code !== undefined)
                url += '/' + code;

            console.log(url);
            var p1 = $.ajax({
                url: url,
                data: JSON.stringify(dataPost),
                type: 'POST',
                contentType: 'application/json'
            }, function (data) {
                // console.log('koboinfo ' + JSON.stringify(data));
                return (data);
            });

            Promise.all([p1]).then(function (values) {

                //$("html").html(values[0]);
                console.log(values[0]);
                var totalTable = 0;
                if (values[0].result === "OK") {

                    // console.log(result);
                    var h = -1;
                    var html = [];


                    if (riskType === 'PHY') {
                        html[++h] =
                            'Physical Deterioration ';
                    } else {
                        html[++h] =
                            'Natural Hazards ';

                    }
                    html[++h] = '<button type="button" class="btn btn-success" id="excelExport' +
                        riskType + '">Excel</button>';
                    html[++h] =
                        '<table id="TableRisk" class="table table-bordered table-striped table-condensed" ><tbody id="risk"' +
                        riskType + '>';
                    html[++h] = '<thead>';
                    html[++h] = '<tr>';
                    html[++h] = '<th>#</th>';
                    html[++h] = '<th>Asset</th>';
                    html[++h] = '<th>Risk</th>';
                    html[++h] = '<th>Type</th>';
                    html[++h] = '<th>Budget (EC$)</th>';
                    html[++h] = '</tr>';
                    html[++h] = '<tbody>';

                    j = 0;

                    for (var val of values[0].data) {
                        // Hay que tener encuenta que por cada activo se debe poner un nuevo a침o si sobrepasa al total por a침o
                        if (totalTable >= totalYearAmount || Math.round(val.properties.cost * 100) / 100 >= totalYearAmount) {
                            html[++h] =
                                '<tr style="background-color: #fcf8e3;text-align:center;"><td colspan = "5">NEXT YEAR</td></tr>';
                            totalTable = 0;
                            console.log("REINICIO: ", totalTable);
                        }
                        // Estas condiciones se ponen hasta ver que soluci칩n se da a los Nan, null y "" de cost, y a la no aparici칩n del cost en los COND-A
                        if (val.properties.cost === 0 || val.properties.code.includes("_COND-A") || val.properties.cost === null) {
                            continue;
                        }

                        html[++h] = '<tr>';
                        html[++h] = '<td>' + (++j) + '</td>';
                        var riskv = val.properties.code.split('__');
                        var riskv2 = val.properties.code.split('__KP');
                        if (val.type.charAt(0) === 'P') {

                            html[++h] = '<td>' + riskv[0] + '-' + riskv[1] + '</td>';

                        } else {
                            html[++h] = '<td>' + riskv2[0] + '</td>';
                        }
                        html[++h] = '<td>' + riskv[2].split('-')[1] + '-' + riskv[2].split('-')[2] +
                            riskv[3] + '</td>';
                        html[++h] = '<td>' + val.type.charAt(0) + '</td>';
                        html[++h] = '<td>' + Math.round(val.properties.cost * 100) / 100 +
                            '</td>';
                        totalTable += Math.round(val.properties.cost * 100) / 100;
                        html[++h] = '</tr>';

                    }
                    html[++h] = '</tbody></table>';

                    $('#divTableRisk').html(html.join(''));


                } else {
                    // console.log('ERROR');
                }
            });

        }

        function paintDonutChart1() {

            if ($('#Routine').val().length > 0) {
                ddata1[0].value = ValRoutine * ValAmount / 100;
            } else {
                ddata1[0].value = 0;
                // ddata1[0].value = 25 * ValAmount / 100;

            }
            if ($('#Periodic').val().length > 0) {
                ddata1[1].value = ValPeriodic * ValAmount / 100;
            } else {
                ddata1[1].value = 0;
                // ddata1[1].value = 70 * ValAmount / 100;

            }
            if ($('#Emergency').val().length > 0) {
                ddata1[2].value = ValEmergency * ValAmount / 100;
            } else {
                ddata1[2].value = 0;
                // ddata1[2].value = 5 * ValAmount / 100;

            }

            if (donut1 === undefined) {

                donut1 = Morris.Donut({
                    // ID of the element in which to draw the chart.
                    element: 'donut1',
                    // Chart data records -- each entry in this array corresponds to a point on
                    // the chart.
                    data: ddata1
                });
            } else {
                donut1.setData(ddata1);
            }

        }

        function paintDonutChart2() {
            var total = ValRoutine * ValAmount / 100

            if ($('#Brushcutting').val().length > 0) {
                ddata2[0].value = ValBrushcutting * total / 100;
            } else {
                ddata2[0].value = 0;
                // ddata2[0].value = 25 * total / 100;

            }
            if ($('#Drainclearing').val().length > 0) {
                ddata2[1].value = ValDrainclearing * total / 100;
            } else {
                ddata2[1].value = 0;
                // ddata2[1].value = 70 * total / 100;

            }
            if ($('#Patching').val().length > 0) {
                ddata2[2].value = ValPatching * total / 100;
            } else {
                // ddata2[2].value = 5 * total / 100;
                ddata2[2].value = 0;

            }
            if ($('#RoadSafetyImprovement').val().length > 0) {
                ddata2[3].value = ValRoadSafetyImprovement * total / 100;
            } else {
                ddata2[3].value = 0;
                // ddata2[3].value = 5 * total / 100;

            }

            if (donut2 === undefined) {

                donut2 = Morris.Donut({
                    // ID of the element in which to draw the chart.
                    element: 'donut2',
                    // Chart data records -- each entry in this array corresponds to a point on
                    // the chart.
                    data: ddata2,
                    colors: ['#ffee00', '#c1b501', '#ffb600', '#bc8701']
                });
            } else {
                donut2.setData(ddata2);
            }

        }

        function paintDonutChart3() {
            var total = ValPeriodic * ValAmount / 100

            // if ($('#Brushcutting').val().length > 0) {
            //     ddata3[0].value = ValDesignProjects * total / 100;
            // } else {
            //     ddata3[0].value = 0;
            //     // ddata3[0].value = 15 * total / 100;

            // }
            if ($('#Brushcutting').val().length > 0) {
                ddata3[0].value = ValWorkInterventions * total / 100;
            } else {
                ddata3[0].value = 0;
                // ddata3[0].value = 75 * total / 100;

            }
            if ($('#Drainclearing').val().length > 0) {
                ddata3[1].value = ValInspections * total / 100;
            } else {
                ddata3[1].value = 0;
                // ddata3[1].value = 10 * total / 100;

            }


            if (donut3 === undefined) {

                donut3 = Morris.Donut({
                    // ID of the element in which to draw the chart.
                    element: 'donut3',
                    // Chart data records -- each entry in this array corresponds to a point on
                    // the chart.
                    data: ddata3,
                    colors: ['#ff0000', '#d6021e']
                });
            } else {
                donut3.setData(ddata3);
            }

        }

        $('#Summary').click(function () {
            //alert('Summary');
            $this = $(this);
            $this.parent().addClass("active");
            $this.parent().siblings().removeClass("active");
            // $('#riskCriteria').hide();
            $('#SummaryContent').show();
            $('#interventionsContent').hide();


        });
        $('#PriorizationofInterventions').click(function () {
            //alert('Summary');
            $this = $(this);
            $this.parent().addClass("active");
            $this.parent().siblings().removeClass("active");

            $('#SummaryContent').hide();
            $('#interventionsContent').show();

            // $('#riskCriteria').show();
            if (Number(ValAmount) > 0 && Number(ValPeriodic) > 0 && Number(ValWorkInterventions) > 0) {
                $('#PhysicalDeterioration').prop("disabled", false);
                $('#NaturalHazards').prop("disabled", false);
            }
        });

        $('input[type=radio][name=optionsRadios]').change(function () {
            switch ($(this).val()) {
                case "Annualavailablebudget":
                    $('#amountdiv').show();
                    $('#menu_annual').show();
                    $('#content_annual').show();
                    $('#menu_global').hide();
                    $('#content_global').hide();
                    $("#graphAnnual").trigger("click");


                    break;
                case "Globalbudget":
                    $('#amountdiv').hide();
                    $('#menu_annual').hide();
                    $('#content_annual').hide();
                    $('#menu_global').show();
                    $('#content_global').show();

                    break;

                default:
                    break;
            }
        });
        $('input[type=radio][name=riskoptionsRadios]').change(function () {
            switch ($(this).val()) {
                case "NaturalHazards":
                    $('#naturalHazardsContent').show();
                    $('#PhysicalDeteriorationContent').hide();
                    $('#graphButton').prop("disabled", false);
                    $('#exportExcelGlobal').prop("disabled", false);
                    break;
                case "PhysicalDeterioration":
                    $('#PhysicalDeteriorationContent').show();
                    $('#naturalHazardsContent').hide();
                    $('#graphButton').prop("disabled", false);
                    $('#exportExcelGlobal').prop("disabled", false);
                    break;

                default:
                    break;
            }
        });
        // $('#Annualavailablebudget').click(function () {
        //     $('#amountdiv').toggle('blind', {}, 500);
        //     $('#menu_annual').toggle('blind', {}, 500);
        //     $('#content_annual').toggle('blind', {}, 500);
        // });

        $('#amountdiv').change(function (event) {
            $('#InvestmentFY2018').html('EC$ ' + $('#ammount').val());
            ValAmount = $('#ammount').val();
            // paintDonutChart1();

        });

        $('#Routine').change(function (event) {
            sanitizeNumberFields($(this));
            ValRoutine = $('#Routine').val();
            $('#disabledInputRoutine').html('EC$ ' + ValAmount * ValRoutine / 100);
            $('#Brushcutting').trigger('change');
            $('#Drainclearing').trigger('change');
            $('#Patching').trigger('change');
            $('#RoadSafetyImprovement').trigger('change');
            // paintDonutChart1();
            // paintDonutChart2();
        });
        $('#Periodic').change(function (event) {
            sanitizeNumberFields($(this));
            ValPeriodic = $('#Periodic').val();
            $('#disabledInputPeriodic').html('EC$ ' + ValAmount * ValPeriodic / 100);
            //$('#DesignProjects').trigger('change');
            $('#WorkInterventions').trigger('change');
            $('#Inspections').trigger('change');
            // paintDonutChart1();
            // paintDonutChart3();
        });
        $('#Emergency').change(function (event) {
            sanitizeNumberFields($(this));
            ValEmergency = $('#Emergency').val();
            $('#disabledInputEmergency').html('EC$ ' + ValAmount * ValEmergency / 100);
            // paintDonutChart1();
        });


        $('#Brushcutting').change(function (event) {
            sanitizeNumberFields($(this));
            ValBrushcutting = $('#Brushcutting').val();
            $('#disabledInputBrushcutting').html('EC$ ' + ValAmount * ValRoutine * ValBrushcutting /
                10000);
            // paintDonutChart2();
        });
        $('#Drainclearing').change(function (event) {
            sanitizeNumberFields($(this));
            ValDrainclearing = $('#Drainclearing').val();
            $('#disabledInputDrainclearing').html('EC$ ' + ValAmount * ValRoutine * ValDrainclearing /
                10000);
            // paintDonutChart2();
        });
        $('#Patching').change(function (event) {
            sanitizeNumberFields($(this));
            ValPatching = $('#Patching').val();
            $('#disabledInputPatching').html('EC$ ' + ValAmount * ValRoutine * ValPatching / 10000);
            // paintDonutChart2();
        });
        $('#RoadSafetyImprovement').change(function (event) {
            sanitizeNumberFields($(this));
            ValRoadSafetyImprovement = $('#RoadSafetyImprovement').val();
            $('#disabledInputRoadSafetyImprovement').html('EC$ ' + ValAmount * ValRoutine *
                ValRoadSafetyImprovement / 10000);
            // paintDonutChart2();
        });



        $('#DesignProjects').change(function (event) {
            sanitizeNumberFields($(this));
            ValDesignProjects = $('#DesignProjects').val();
            $('#disabledInputDesignProjects').val('EC$ ' + ValAmount * ValPeriodic * ValDesignProjects /
                10000);
            // paintDonutChart3();
        });
        $('#WorkInterventions').change(function (event) {
            sanitizeNumberFields($(this));
            ValWorkInterventions = $('#WorkInterventions').val();
            $('#disabledInputWorkInterventions').html('EC$ ' + ValAmount * ValPeriodic *
                ValWorkInterventions /
                10000);
            // paintDonutChart3();
            if (Number(ValAmount) > 0 && Number(ValPeriodic) > 0 && Number(ValWorkInterventions) > 0) {
                $('#PhysicalDeterioration').prop("disabled", false);
                $('#NaturalHazards').prop("disabled", false);
            }
        });
        $('#Inspections').change(function (event) {
            sanitizeNumberFields($(this));
            ValInspections = $('#Inspections').val();
            $('#disabledInputInspections').html('EC$ ' + ValAmount * ValPeriodic * ValInspections /
                10000);
            // paintDonutChart3();
        });

        $('#levelRisk').change(function (event) {
            console.log($(this).val());
            // var riskrange = $(this).val();
            // var riskfilter = [];
            // for (var row of Object.keys(risk_rating)) {
            //     for (var col of Object.keys(risk_rating[row])) {
            //         console.log(row + ': ' + col + ' --> ' + risk_rating[row][col]);
            //         if (risk_rating[row][col] === riskrange * 1) {
            //             riskfilter.push(row + '__' + col);
            //         }
            //     }
            // }
            // console.log(riskfilter);
            var dataPost = {};
            dataPost[this.name] = $(this).val();
            var p1 = $.ajax({
                url: '/auth/WEB/budget/indexes/' + $(this).val(),
                data: JSON.stringify(dataPost),
                type: 'POST',
                contentType: 'application/json'
            }, function (data) {
                // console.log('koboinfo ' + JSON.stringify(data));
                return (data);
            });
            Promise.all([p1]).then(function (values) {

                //$("html").html(values[0]);
                if (values[0].result === "OK") {
                    // console.log('OK');
                    for (var val of Object.keys(values[0])) {
                        // console.log(val + ' ' + values[0][val]);
                        if (val.indexOf('investment') >= 0)
                            $('#' + val).html(Math.round(values[0][val] * 100 / 1000000) / 100);
                        else if (val.indexOf('km') >= 0)
                            $('#' + val).html(Math.round(values[0][val] * 100 / 1000) / 100);
                        else
                            $('#' + val).html(values[0][val]);
                    }

                } else {
                    // console.log('ERROR');
                }
            });


        });

        // $('input[type=radio][name=optionRisk]').change(function () {
        //     var riskType = "";
        //     switch ($(this).val()) {
        //         case "PhysicalDeterioration":
        //             $('#divTableRisk').empty();
        //             // $('#divTableRisk').append('Physical Deterioration');
        //             riskType = 'PHY';

        //             break;
        //         case "NaturalHazards":
        //             $('#divTableRisk').empty();
        //             // $('#divTableRisk').append('Natural Hazards');
        //             riskType = 'NAT';

        //             break;

        //         default:
        //             break;
        //     }

        //     var dataPost = {};
        //     dataPost['riskType'] = riskType;
        //     var p1 = $.ajax({
        //         url: '/auth/WEB/schedule/getSched/' + riskType + '/' + ((ValAmount * 1000000) *
        //             (ValPeriodic / 100) * (ValWorkInterventions / 100)),
        //         data: JSON.stringify(dataPost),
        //         type: 'POST',
        //         contentType: 'application/json'
        //     }, function (data) {
        //         // console.log('koboinfo ' + JSON.stringify(data));
        //         return (data);
        //     });
        //     Promise.all([p1]).then(function (values) {

        //         //$("html").html(values[0]);
        //         console.log(values[0]);
        //         if (values[0].result === "OK") {

        //             // console.log(result);
        //             var h = -1;
        //             var html = [];
        //             if (riskType === 'PHY') {
        //                 html[++h] =
        //                     'Physical Deterioration <a href="#" id="filterPhy" title="Filter/Show data"><i class="fas fa-filter"></i></a>';
        //             } else {
        //                 html[++h] =
        //                     'Natural Hazards <a href="#" id="filterNat" title="Filter/Show data"><i class="fas fa-filter"></i></a>';

        //             }
        //             html[++h] =
        //                 '<table class="table table-bordered table-striped table-condensed" ><tbody id="risk"' +
        //                 riskType + '>';
        //             html[++h] = '<thead>';
        //             html[++h] = '<tr>';
        //             html[++h] = '<th>#</th>';
        //             html[++h] = '<th>Asset</th>';
        //             html[++h] = '<th>Risk</th>';
        //             html[++h] = '<th>Type</th>';
        //             html[++h] = '<th>Budget</th>';
        //             html[++h] = '</tr>';
        //             html[++h] = '<tbody>';

        //             j = 0;
        //             for (var val of values[0].data) {
        //                 html[++h] = '<tr>';
        //                 html[++h] = '<td>' + (++j) + '</td>';
        //                 var riskv = val.properties.code.split('__');
        //                 html[++h] = '<td>' + riskv[0] + '-' + riskv[1] + '</td>';
        //                 html[++h] = '<td>' + riskv[2].split('-')[1] + '-' + riskv[2].split('-')[
        //                     2] + riskv[3] + '</td>';
        //                 html[++h] = '<td>' + val.type.charAt(0) + '</td>';
        //                 html[++h] = '<td>' + Math.round(val.properties.cost * 100) / 100 +
        //                     '</td>';
        //                 html[++h] = '</tr>';
        //             }
        //             html[++h] = '</tbody></table>';

        //             $('#divTableRisk').html(html.join(''));


        //         } else {
        //             // console.log('ERROR');
        //         }
        //     });
        // });
        $('input[type=number]').on('focus', function () {
            // console.log(this.value1);
            // On first focus, check to see if we have the default text saved
            // If not, save current value to data()
            //if (!$(this).data('')) $(this).data('', $(this).val());

            // check to see if the input currently equals the default before clearing it
            valant = $(this).val();
        });
        $('input[type=number]').on('blur', function () {
            console.log($(this).val());
            if ($(this).val() != valant) {
                // $(this).val($(this).data('defaultText'));
                var dataPost = {};
                dataPost[this.name] = this.value;
                var $input = $(this);

                console.log('New Val: ' + JSON.stringify(dataPost));

                var p1 = $.ajax({
                    url: '/auth/WEB/budget/update_field_budget/' + this.name + '/' +
                        this.value,
                    data: JSON.stringify(dataPost),
                    type: 'POST',
                    contentType: 'application/json'
                }, function (data) {
                    // console.log('koboinfo ' + JSON.stringify(data));
                    return (data);
                });
                Promise.all([p1]).then(function (values) {
                    console.log(values);
                    if (values[0].result === "OK") {
                        $input.css("border", "2px solid green");
                    } else {
                        $input.css("border", "2px solid red");
                    }
                });

            }
        });

        $('#graphAnnual').click(function () {
            ValAmount = $('#ammount').val();
            $('#InvestmentFY2018').html('EC$ ' + ValAmount);

            ValRoutine = $('#Routine').val();
            $('#disabledInputRoutine').html('EC$ ' + ValAmount * ValRoutine / 100);
            ValPeriodic = $('#Periodic').val();
            $('#disabledInputPeriodic').html('EC$ ' + ValAmount * ValPeriodic / 100);
            ValEmergency = $('#Emergency').val();
            $('#disabledInputEmergency').html('EC$ ' + ValAmount * ValEmergency / 100);
            ValBrushcutting = $('#Brushcutting').val();
            $('#disabledInputBrushcutting').html('EC$ ' + ValAmount * ValRoutine * ValBrushcutting /
                10000);
            ValDrainclearing = $('#Drainclearing').val();
            $('#disabledInputDrainclearing').html('EC$ ' + ValAmount * ValRoutine *
                ValDrainclearing / 10000);
            ValPatching = $('#Patching').val();
            $('#disabledInputPatching').html('EC$ ' + ValAmount * ValRoutine * ValPatching /
                10000);
            ValRoadSafetyImprovement = $('#RoadSafetyImprovement').val();
            $('#disabledInputRoadSafetyImprovement').html('EC$ ' + ValAmount * ValRoutine *
                ValRoadSafetyImprovement / 10000);
            ValDesignProjects = $('#DesignProjects').val();
            $('#disabledInputDesignProjects').val('EC$ ' + ValAmount * ValPeriodic *
                ValDesignProjects / 10000);
            ValWorkInterventions = $('#WorkInterventions').val();
            $('#disabledInputWorkInterventions').html('EC$ ' + ValAmount * ValPeriodic *
                ValWorkInterventions / 10000);


            ValInspections = $('#Inspections').val();
            $('#disabledInputInspections').html('EC$ ' + ValAmount * ValPeriodic *
                ValInspections / 10000);

            if ($('#Summary').parent().attr('class') === 'active') {
                paintDonutChart1();
                paintDonutChart2();
                paintDonutChart3();
            }

            var strategies = $('input[type=radio][name=OptionStrategies]:checked').val();
            if (strategies === undefined) {

                paintRiskTable();
            } else {
                // console.log(strategies);
                switch (strategies) {
                    case 'CorridorpriorizationvalLayer':
                        var code = $('#Corridorpriorizationval').val();
                        console.log('Code ', code)
                        if (code === "")
                            paintRiskTable();
                        else {
                            paintRiskTable(code);

                        }
                        break;

                    default:
                        break;
                }
            }

        });

        $('input[type=radio][name=OptionStrategies]').click(function () {
            $('input[type=radio][name=OptionStrategies]').each(function (index) {
                $('#' + $(this).val()).hide(500);

            });
            $('#' + $('input[type=radio][name=OptionStrategies]:checked').val()).show(500);


        })

        // $('#Distancesinergies').click(function () {
        //     $('#DistancesinergiesvalLayer').toggle(500);

        // })
        // $('#Assetsshare').click(function () {
        //     $('#AssetssharevalLayer').toggle(500);

        // })
        // $('#Corridorpriorization').click(function () {
        //     $('#CorridorpriorizationvalLayer').toggle(500);

        // })

        function Export2Excel(table) {
            var name = table + '_results_' + Math.floor((Math.random() * 9999999) +
                1000000) + '.xls';
            $("#" + table).table2excel({
                // exclude CSS class
                exclude: ".noExl",
                name: "Export data",
                filename: name //do not include extension
            });

        }

        $('#excelExport').click(function (event) {
            // window.open('data:application/vnd.ms-excel,' + $('div[id$=TableAnnualAvailableBudget]').html());
            Export2Excel('TableAnnualAvailableBudget');

        })
        var checkExist = setInterval(function () {
            if ($('#TableRisk').length) {
                // console.log("Exists!");
                clearInterval(checkExist);
                $('#excelExportPHY').click(function (event) {
                    Export2Excel('TableRisk');

                })
                $('#excelExportNAT').click(function (event) {
                    Export2Excel('TableRisk');

                })

            }
        }, 1000); // check every 1000ms

        $('#exportExcelGlobal').click(function (event) {
            var option = $('input:checked[type=radio][name=riskoptionsRadios]').val();
            console.log(option);
            if (option === 'PhysicalDeterioration') {
                Export2Excel('PhysicalDeteriorationContent');

            } else if (option === 'NaturalHazards') {
                Export2Excel('naturalHazardsContent');

            }



        })


    });
</script>